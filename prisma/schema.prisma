// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SourceType {
  OFFICIAL_DOC
  RSS_BLOG
  GITHUB
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  documents     Document[]
  collections   Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id            String  @id @default(cuid())
  email         String
  token         String  @unique
  expires       DateTime

  @@index([email, token])
}

model PasswordResetToken {
  id            String  @id @default(cuid())
  email         String
  token         String  @unique
  expires       DateTime

  @@index([email, token])
}

model TwoFactorToken {
  id            String  @id @default(cuid())
  email         String
  token         String  @unique
  expires       DateTime

  @@index([email, token])
}

model TwoFactorConfirmation {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Document {
  id            String  @id @default(cuid())
  name          String
  type          String
  size          Int
  path          String
  url           String?
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  importTime    DateTime @default(now())
  isPublic      Boolean @default(false)
  isDeleted     Boolean @default(false)
  isArchived    Boolean @default(false)
  isFavorite    Boolean @default(false)
  isPinned      Boolean @default(false)
  tags          String[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model Collection {
  id            String      @id @default(cuid())
  name          String
  sourceType    SourceType
  originalUrl   String
  lastSyncTime  DateTime
  syncFrequency String
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  docItems      DocItem[]
  blogItems     BlogItem[]
  githubItems   GithubItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@unique([originalUrl, userId])
}

model DocItem {
  id            String      @id @default(cuid())
  title         String
  url           String
  content       String?     @db.Text
  lastSyncTime  DateTime
  collectionId  String
  collection    Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([collectionId])
}

model BlogItem {
  id            String      @id @default(cuid())
  title         String
  url           String
  content       String?     @db.Text
  publishDate   DateTime?
  author        String?
  lastSyncTime  DateTime
  collectionId  String
  collection    Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([collectionId])
}

model GithubItem {
  id            String      @id @default(cuid())
  name          String
  url           String
  readme        String?     @db.Text
  description   String?
  stars         Int?
  forks         Int?
  language      String?
  topics        String[]
  lastSyncTime  DateTime
  collectionId  String
  collection    Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([collectionId])
}
